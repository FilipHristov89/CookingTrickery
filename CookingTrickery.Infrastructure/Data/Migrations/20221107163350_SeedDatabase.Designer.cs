// <auto-generated />
using System;
using CookingTrickery.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CookingTrickery.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CookingTrickeryDbContext))]
    [Migration("20221107163350_SeedDatabase")]
    partial class SeedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Cuisine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ea505ff-7e9a-4540-8100-182123ce9605"),
                            Calories = 40,
                            Description = "An onion , also known as the bulb onion or common onion, is a vegetable that is the most widely cultivated species of the genus Allium.",
                            Name = "Onion",
                            Origin = "Central Asia",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("6e56c040-63ec-4fa8-9c87-ba3a1a732a22"),
                            Calories = 384,
                            Description = "Olive oil is a liquid fat obtained from olives (the fruit of Olea europaea; family Oleaceae), a traditional tree crop of the Mediterranean Basin.",
                            Name = "Olive Oil",
                            Origin = "Ancient Greek",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("0f09aa47-294d-44d4-a0a4-a275ea55e6bc"),
                            Calories = 41,
                            Description = "The carrot (Daucus carota subsp. sativus) is a root vegetable, typically orange in color, though purple, black, red, white, and yellow cultivars exist",
                            Name = "Carrot",
                            Origin = "Central Asia",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("9752dbe2-cf14-4393-bbd7-f28fa6ff617b"),
                            Calories = 149,
                            Description = "Garlic (Allium sativum) is a species of bulbous flowering plant in the genus Allium. Its close relatives include the onion, shallot, leek, chive,",
                            Name = "Garlic",
                            Origin = "Middle East",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("485c2be4-8417-4ed1-90b6-467cbce9d46a"),
                            Calories = 77,
                            Description = "The potato is a starchy tuber of the plant Solanum tuberosum and is a root vegetable native to the Americas.",
                            Name = "Potato",
                            Origin = "South America",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("36d126d9-e4ae-47e7-ac09-937e0a8ebf6d"),
                            Calories = 250,
                            Description = "Beef is the culinary name for meat from cattle (Bos taurus).In prehistoric times, humankind hunted aurochs and later domesticated them.",
                            Name = "Beef",
                            Origin = "All over the world",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("ca39cc0d-6b7c-4226-a912-80bd7a56e7e7"),
                            Calories = 100,
                            Description = "Beef broth is usually the liquid meat is cooked in, sometimes with added vegetables.",
                            Name = "Beef broth",
                            Origin = "All over the world",
                            Type = 22
                        },
                        new
                        {
                            Id = new Guid("39af066a-8e5b-4942-bd68-932714284d66"),
                            Calories = 78,
                            Description = "Worcestershire sauce, sometimes called Worcester sauce, is a fermented liquid condiment invented in the city of Worcester in Worcestershire, England, during the first half of the 19th century.",
                            Name = "Worcestershire sauce",
                            Origin = "United Kingdom",
                            Type = 4
                        },
                        new
                        {
                            Id = new Guid("28aeedac-d707-4ae8-8404-fcf89a3719a3"),
                            Calories = 82,
                            Description = "Tomato paste is a thick paste made by cooking tomatoes for several hours to reduce the water content, straining out the seeds and skins, and cooking the liquid again to reduce the base to a thick, rich concentrate.",
                            Name = "Tomato paste",
                            Origin = "All over the world",
                            Type = 25
                        },
                        new
                        {
                            Id = new Guid("551e0516-e39a-4359-8211-d97e4152abcc"),
                            Calories = 1,
                            Description = "Thyme has always been a considered a plant that could grant courage. ",
                            Name = "Dried thyme",
                            Origin = "Mediterranean region",
                            Type = 11
                        },
                        new
                        {
                            Id = new Guid("3a48aa8a-d9a3-43f5-bc8b-d98d1515ec43"),
                            Calories = 1,
                            Description = "Though originally from Europe and the Mediterranean, many Americans see it as a classic and patriotic spice.",
                            Name = "Dried rosemary",
                            Origin = "Europe",
                            Type = 11
                        },
                        new
                        {
                            Id = new Guid("e1e685ec-4798-4ee4-97b9-c3df854461bc"),
                            Calories = 1,
                            Description = "Caraway, also known as meridian fennel and Persian cumin (Carum carvi), is a biennial plant in the family Apiaceae, native to western Asia, Europe, and North Africa",
                            Name = "Caraway seeds",
                            Origin = "All over the world",
                            Type = 11
                        },
                        new
                        {
                            Id = new Guid("e61604a4-9f1e-45db-b840-b82e7327cd28"),
                            Calories = 1,
                            Description = "The bay leaf is an aromatic leaf commonly used in cooking. It can be used whole, either dried or fresh, in which case it is removed from the dish before consumption, or less commonly used in ground form.",
                            Name = "Bay leaves",
                            Origin = "Mediterranean region",
                            Type = 11
                        },
                        new
                        {
                            Id = new Guid("630c4443-28ff-4aba-a48b-6dbe6c64b033"),
                            Calories = 1,
                            Description = "Flour is a powder made by grinding raw grains, roots, beans, nuts, or seeds.",
                            Name = "All-purpose Flour",
                            Origin = "All over the world",
                            Type = 13
                        },
                        new
                        {
                            Id = new Guid("52a20631-47f3-45c7-a1fe-a41802908375"),
                            Calories = 5,
                            Description = "Parsley, or garden parsley (Petroselinum crispum) is a species of flowering plant in the family Apiaceae that is native to the central and eastern Mediterranean region ",
                            Name = "Fresh Parsley",
                            Origin = "Mediterranean region",
                            Type = 1
                        });
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.IngredientMeasurement", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeasurementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Measurement")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientId", "MeasurementId");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("RecipeId");

                    b.ToTable("IngredientMeasurements");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Measurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MeasurementType")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fadac7a7-abb2-4e75-93f4-b42ac441bed5"),
                            MeasurementType = 4,
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("dec7d41c-542f-41be-8ca4-e95aaa5a1fdd"),
                            MeasurementType = 3,
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("c2106501-d1ce-4eb0-9c91-82a4898fcb67"),
                            MeasurementType = 3,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("27c6be3e-3404-4525-9a05-b3b4811ad2dd"),
                            MeasurementType = 14,
                            Quantity = 4.0
                        },
                        new
                        {
                            Id = new Guid("df4924db-cdc2-44f4-9ab0-b181c26c5e93"),
                            MeasurementType = 14,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("a6cd1e21-4010-4bfc-8b31-be5776aa2a7a"),
                            MeasurementType = 13,
                            Quantity = 3.0
                        },
                        new
                        {
                            Id = new Guid("100248f5-ce7f-40ca-abc8-c0d005c8a988"),
                            MeasurementType = 16,
                            Quantity = 3.0
                        },
                        new
                        {
                            Id = new Guid("bb9b314b-faa4-4e3b-ac45-b0fd25aa987c"),
                            MeasurementType = 4,
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("451e6845-3dde-44fa-9787-37d2f12fab0b"),
                            MeasurementType = 4,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("77264a66-b4a2-4657-abf7-9db4e7b1adf9"),
                            MeasurementType = 5,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("b5a9d637-315c-416b-98f9-ee5f702833de"),
                            MeasurementType = 5,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("63cd695b-d2fc-42b7-9e1c-633e1dcec351"),
                            MeasurementType = 5,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("8b1d8496-58a3-405f-8bc2-036867407274"),
                            MeasurementType = 5,
                            Quantity = 1.0
                        },
                        new
                        {
                            Id = new Guid("717496fb-5b3c-439f-bc15-dd74381d6d7d"),
                            MeasurementType = 15,
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = new Guid("1ac5b1b6-9dbb-49fc-ad95-686476a0fb57"),
                            MeasurementType = 12,
                            Quantity = 0.5
                        },
                        new
                        {
                            Id = new Guid("d45f0662-ae2e-47ce-b662-8e459b3f0e0e"),
                            MeasurementType = 4,
                            Quantity = 2.0
                        });
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CuisineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("NumberOfServing")
                        .HasColumnType("int");

                    b.Property<string>("PrepTime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("QuickDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.UsersFavorites", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("UserRecipes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<Guid?>("FavoriteCuisineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("FavoriteCuisineId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.IngredientMeasurement", b =>
                {
                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.Ingredient", "Ingredient")
                        .WithMany("IngredientsMeasurements")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.Measurement", null)
                        .WithMany("IngredientsMeasurements")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Recipe", b =>
                {
                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.Cuisine", "Cuisine")
                        .WithMany("Recipes")
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.User", "User")
                        .WithMany("UserRecipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.UsersFavorites", b =>
                {
                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.Recipe", "Recipe")
                        .WithMany("UsersFavorites")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.User", "User")
                        .WithMany("FavoriteRecipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasOne("CookingTrickery.Infrastructure.Data.Entities.Cuisine", "FavoriteCuisine")
                        .WithMany("UsersFavorites")
                        .HasForeignKey("FavoriteCuisineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FavoriteCuisine");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Cuisine", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("UsersFavorites");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Ingredient", b =>
                {
                    b.Navigation("IngredientsMeasurements");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Measurement", b =>
                {
                    b.Navigation("IngredientsMeasurements");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("UsersFavorites");
                });

            modelBuilder.Entity("CookingTrickery.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("FavoriteRecipes");

                    b.Navigation("UserRecipes");
                });
#pragma warning restore 612, 618
        }
    }
}
